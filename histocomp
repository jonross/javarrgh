#!/usr/bin/env scala
!#

import scala.io.Source

type ClassName = String
type Histogram = Map[ClassName, Counter]

case class Counter(name: ClassName, count: Int = 0, bytes: Long = 0) {
    def +(that: Counter) = Counter(this.name, this.count + that.count, this.bytes + that.bytes)
    def -(that: Counter) = Counter(this.name, this.count - that.count, this.bytes - that.bytes)
    def >(that: Counter) = this.bytes > that.bytes
    override def toString = "%10d  %15d  %s".format(count, bytes, name)
}

val zero = Counter("")

def combine(h: Histogram, c: Counter) = 
    h + ((c.name, c + h.getOrElse(c.name, zero)))

def load(file: String) = {
    val fields = Source.fromFile(file).getLines().toSeq.drop(3).dropRight(1).map(_.trim.split("\\s+"))
    val counters = fields.map(f => Counter(f(3), f(1).toInt, f(2).toLong))
    counters.foldLeft(Map[ClassName, Counter]())(combine(_, _))
}

val h1 = load(argv(0))
val h2 = load(argv(1))

val diffs =
    (for ((name, counter) <- h1) yield (h2.getOrElse(name, zero) - counter)) ++
    (for ((name, counter) <- h2 if !h1.contains(name)) yield counter)

val tops = diffs.toSeq.sortWith(_ > _).take(50)
tops.foreach(println)
println(tops.foldLeft(Counter("total"))(_ + _))

// vim: ft=scala
